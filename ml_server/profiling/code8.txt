
# Default theme
sns.set_theme(palette='tab10',
              font_scale=1.5,
              rc=None)

import matplotlib
matplotlib.rcParams.update({'font.size': 11})

plt.figure(figsize=(12,5))

plt.subplot(1,2,1)
ax1 = sns.countplot(x='Type', hue='Type', data=df1, palette='tab10', legend=False)  # Assign x to hue
ax1.bar_label(ax1.containers[0])
plt.title("Type", fontsize=15, color='Red')

plt.subplot(1,2,2)
ax2 = df1['Type'].value_counts().plot.pie(explode=[0.1, 0.1,0.1],autopct='%1.2f%%',shadow=True, colors=sns.color_palette('tab10'))
ax2.set_title(label = "Type", fontsize = 15, color='Red')

plt.tight_layout()

fig_path = "./figures/fig" + str(fig_number) + ".png"
plt.savefig(fig_path)
fig_number += 1
plt.close();


# Define lighter shades of green and blue
light_green = '#008000'  # Lighter shade of green
light_blue = '#000080'   # Lighter shade of blue

colors = [light_green, light_blue]  # Define colors

plt.pie(df1['Target'].value_counts(),  explode=[0.1, 0.2], labels=['Not failure', 'Failure'],
        autopct='%1.1f%%', wedgeprops={'edgecolor': 'black'}, shadow=True, startangle=25,
        colors=colors, textprops={'color': 'white'})  # Set text color to white
plt.title('Failure vs not failure', color='white')  # Set title color to white
plt.tight_layout()
fig_path = "./figures/fig" + str(fig_number) + ".png"
plt.savefig(fig_path)
fig_number += 1
plt.close()

fig, axes = plt.subplots(1,3, figsize=[15,5])
axes.flatten()
j=0
colors = ['#008000', '#000080']
for i in ['L', 'M', 'H']:
    df_product_type = df1[df1['Type'] == i]
    axes[j].pie(df_product_type['Target'].value_counts(), labels=['Failure', 'Not failure'],
                autopct='%1.2f%%', wedgeprops={'edgecolor': 'black'}, shadow=True, startangle=25,
                colors=colors,textprops={'color': 'white'})
    axes[j].set_title('% of failure for ' + i + ' products')
    j+=1

fig_path = "./figures/fig" + str(fig_number) + ".png"
plt.savefig(fig_path)
fig_number += 1
plt.close()

sns.pairplot(df1,hue='Target', height = 3)
fig_path = "./figures/fig" + str(fig_number) + ".png"
plt.savefig(fig_path)
fig_number += 1
plt.close()

import matplotlib.pyplot as plt
import seaborn as sns

plt.rcParams['axes.labelsize'] = 12
plt.rcParams['axes.titlesize'] = 16

# Create subplots
fig, axes = plt.subplots(1, 2, figsize=[15,5])
axes = axes.flatten()
j = 0

# Define colors for 'Target' values
colors = ['green', 'blue']

# Loop through attributes
for i in ['Torque', 'Rotational speed']:
    # Plot violins for each group based on 'Target' variable
    sns.violinplot(data=df1, x='Target', y=i, ax=axes[j], hue='Target', palette=colors, dodge=False)
    axes[j].set_title(i + ' violin distribution wrt target')
    axes[j].legend_.remove()  # Remove legend
    j += 1

plt.tight_layout()
fig_path = "./figures/fig" + str(fig_number) + ".png"
plt.savefig(fig_path)
fig_number += 1
plt.close()


#plt.figure(figsize=(8, 8))
#sns.heatmap(df1.corr(), annot=True)
#plt.show()


numeric_df = df1.select_dtypes(include=['float64', 'int64'])  # Select only numeric columns
plt.figure(figsize=(8, 8))
sns.heatmap(numeric_df.corr(), annot=True)
fig_path = "./figures/fig" + str(fig_number) + ".png"
plt.savefig(fig_path)
fig_number += 1
plt.close()

# Observe distribution of failures in a pie chart
import plotly.graph_objects as go
import plotly.express as px

fig = px.pie(df1,
             title='Failure Types',
             names='Failure Type')

fig.update_layout(margin=dict(t=0, b=0, l=0, r=0))

fig_path = "./figures/fig" + str(fig_number) + ".png"
fig.savefig(fig_path)
fig_number += 1

fig, ax = plt.subplots(1,2, figsize=[22,8])
plt.title('Rot. Speed vs Torque wrt Failure Type')
sns.scatterplot(data=df1, x='Rotational speed', y='Torque', hue='Failure Type', palette=['#E9C0CB', '#39A692', '#976EBD', '#ACBF5C', '#DF8B4E'], ax=ax[0])
sns.scatterplot(data=df1[df1['Target'] == 1], x='Rotational speed', y='Torque', hue='Failure Type', palette=['#39A692', '#976EBD', '#ACBF5C', '#DF8B4E'], ax=ax[1])

ax[0].set_title('Including class no failure')
ax[1].set_title('Excluding class no failure')

fig_path = "./figures/fig" + str(fig_number) + ".png"
fig.savefig(fig_path)
fig_number += 1
plt.close()


fig, ax = plt.subplots(1,2, figsize=[22,8])
plt.title('Rot. Speed vs Torque wrt Failure Type')
sns.scatterplot(data=df1, x='Rotational speed', y='Torque', hue='Failure Type', palette=['#E9C0CB', '#39A692', '#976EBD', '#ACBF5C', '#DF8B4E'], ax=ax[0])
sns.scatterplot(data=df1[df1['Target'] == 1], x='Rotational speed', y='Torque', hue='Failure Type', palette=['#39A692', '#976EBD', '#ACBF5C', '#DF8B4E'], ax=ax[1])

ax[0].set_title('Including class no failure')
ax[1].set_title('Excluding class no failure')

fig_path = "./figures/fig" + str(fig_number) + ".png"
plt.savefig(fig_path)
fig_number += 1
plt.close()

# print('----- SKEWNESS ------------')
# fig, axes = plt.subplots(2, 5, figsize=[25,10])
# j = 0
# colors = ['#E1728F', '#409E7D']

# for i in ['Air temperature', 'Process temperature', 'Rotational speed', 'Torque', 'Tool wear']:
#     sns.histplot(data=df1, x=i, kde=True, ax=axes[0,j], hue='Target', palette=colors)
#     sns.boxplot(data=df1, x=i, ax=axes[1,j], palette=['#976EBD'])
#     j+=1
#     print('{} skewness = {}'.format(i, round(df1[i].skew(), 2)))
# print('---------------------------')



print('----- SKEWNESS ------------')
fig, axes = plt.subplots(2, 5, figsize=[25,10])
j = 0
colors = ['#E1728F', '#409E7D']

for i in ['Air temperature', 'Process temperature', 'Rotational speed', 'Torque', 'Tool wear']:
    sns.histplot(data=df1, x=i, kde=True, ax=axes[0,j], hue='Target', palette=colors, legend=False)
    sns.boxplot(data=df1, x=i, ax=axes[1,j])
    j += 1
    print('{} skewness = {}'.format(i, round(df1[i].skew(), 2)))
print('---------------------------')

fig_path = "./figures/fig" + str(fig_number) + ".png"
plt.savefig(fig_path)
fig_number += 1
plt.close()